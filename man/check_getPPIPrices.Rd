% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper_prices.R
\name{check_getPPIPrices}
\alias{check_getPPIPrices}
\title{Chequeo con logging para `methodsPPI::getPPIPrices`}
\usage{
check_getPPIPrices(...)
}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[=getPPIPrices]{getPPIPrices}}
  \describe{
    \item{\code{token}}{Token de PPI}
    \item{\code{ticker}}{Tickers a buscar. Acepta vector.}
    \item{\code{type}}{Tipo de activo. Siempre usar único tipo por vez. Acepta vector.}
    \item{\code{from}}{Fecha desde la que buscar}
    \item{\code{to}}{Fecha hasta la que buscar}
    \item{\code{settlement}}{Tipo de liquidación. Default es "INMEDIATA"}
  }}
}
\value{
Una lista con:
\itemize{
  \item{`ok`}{ Lógico: `TRUE` si la llamada fue exitosa; `FALSE` si hubo fallos.}
  \item{`data`}{ `data.frame` con los datos obtenidos si `ok` es `TRUE`; `NULL` si `ok` es `FALSE`.}
  \item{`fail`}{ `data.frame` con los tickers que fallaron si `ok` es `FALSE`; `NULL` si `ok` es `TRUE`.}
  \item{`msg`}{ Mensaje descriptivo del resultado.}
}
}
\description{
Envuelve `methodsPPI::getPPIPrices()` para manejar errores y registrar mensajes en el log.
}
\examples{
\dontrun{
res <- check_getPPIPrices(
  token$token,
  ticker     = lecaps_consultar$ticker,
  type       = lecaps_consultar$type,
  from       = min(from, max_fecha_lecap + 1),  # cubre huecos si la DB está atrasada
  to         = to,
  settlement = settlement,
  server     = server,
  port       = port
)
if (!res$ok) {
  print(res$msg)
  print(res$fail)
}
datos <- res$data
}

}
\seealso{
[methodsPPI::getPPIPrices()], [functions::log_msg()]
}
